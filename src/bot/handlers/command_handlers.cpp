#include "command_handlers.hpp"
#include <string>
#include <unordered_map>

namespace NeverForgetBot::Commands {

static const std::string kStartMessage = "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Never Forget Bot! üëã\n\n"
"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∏ —è –ø–æ–∑–∞–±–æ—á—É—Å—å –æ–±–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º. üéØ\n\n"
"–í–æ—Ç –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
"1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞–≤—Ç—Ä–∞ –≤ 3 —á–∞—Å–∞ –¥–Ω—è¬ª)\n"
"2Ô∏è‚É£ –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—É –¥–µ—Ç–∞–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—é —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–∞—Å\n"
"3Ô∏è‚É£ –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –≤ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –∏ –Ω—É–∂–Ω—ã–π —á–∞—Å üòé\n\n"
"–î–∞–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏–º –∑–∞–±—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. üöÄ";

static const std::string kHelpMessage = R"markdown(
üî•Never Forget Botüî•

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
/help - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/upcoming\_events - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
/cancel\_event - –æ—Ç–º–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å:
üìÖ *–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É —Å –î–∏–º–æ–π –∑–∞–≤—Ç—Ä–∞ –≤ 10:00¬ª), –∏ —è —Å–æ–∑–¥–∞–º –µ–≥–æ –¥–ª—è –≤–∞—Å.
‚è∞ *–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: —è –ø–æ–∑–∞–±–æ—á—É—Å—å –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤—ã –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ —Å–≤–æ–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –ù–∞–ø–æ–º–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ 15:00
‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥–æ–∫—Ç–æ—Ä—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ 20 –¥–µ–∫–∞–±—Ä—è –≤ 9 —É—Ç—Ä–∞
)markdown";

void onHelpCommand(TgBot::Message::Ptr message, TgBot::Bot &bot) {
    bot.getApi().sendMessage(message->chat->id, kHelpMessage, nullptr, nullptr, nullptr, "Markdown");
}

void onStartCommand(TgBot::Message::Ptr message, TgBot::Bot &bot) {
    bot.getApi().sendMessage(message->chat->id, kStartMessage);
}

void onChangeTzCommand(TgBot::Message::Ptr message, TgBot::Bot& bot) {
        // Create an inline keyboard with options for time zones or cities
        TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

        // Uzbekistan cities (with time zone information)
        std::vector<TgBot::InlineKeyboardButton::Ptr> uzbekistanRow;
        std::unordered_map<std::string, std::string> UzbTimeZone = {
            {"–¢–∞—à–∫–µ–Ω—Ç", "user_timez-Tashkent"},
            {"–°–∞–º–∞—Ä–∫–∞–Ω–¥", "user_timez-Samarkand"},
            {"–ë—É—Ö–∞—Ä–∞", "user_timez-Bukhara"}
        };
        for (const auto& [city, tz] : UzbTimeZone) {
            std::string cityWithTz = city;
            auto button = std::make_shared<TgBot::InlineKeyboardButton>();
            button->text = cityWithTz;
            button->callbackData = tz; // Use time zone offset as callback data
            uzbekistanRow.push_back(button);
        }

        // Russia cities (with time zone information)
        std::vector<TgBot::InlineKeyboardButton::Ptr> russiaRow;
        std::unordered_map<std::string, std::string> RusTimeZone = {
            {"–ú–∞—Å–∫–≤–∞", "user_timez-Moscow"},
            {"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "user_timez-St_Petersburg"},
            {"–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "user_timez-Novosibirsk"}
        };
        for (const auto& [city, tz] : RusTimeZone) {
            std::string cityWithTz = city;
            auto button = std::make_shared<TgBot::InlineKeyboardButton>();
            button->text = cityWithTz;
            button->callbackData = tz; // Use time zone offset as callback data
            russiaRow.push_back(button);
        }

        // Add rows to the keyboard
        keyboard->inlineKeyboard.push_back(uzbekistanRow);
        keyboard->inlineKeyboard.push_back(russiaRow);

        // Send the message with the inline keyboard
        bot.getApi().sendMessage(
            message->chat->id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            nullptr,  // LinkPreviewOptions
            nullptr,  // ReplyParameters
            keyboard,  // Include the keyboard here
            "Markdown"
        );
}

void handleTimeZoneSelection(const std::string& timeZone, TgBot::CallbackQuery::Ptr query, TgBot::Bot& bot, NeverForgetBot::Database& db) {
    std::unordered_map<std::string,std::pair<std::string,int>> timeZoneInfo = {
        {"Tashkent", {"–¢–∞—à–∫–µ–Ω—Ç",5}},
        {"Samarkand", {"–°–∞–º–∞—Ä–∫–∞–Ω–¥",5}},
        {"Bukhara", {"–ë—É—Ö–∞—Ä–∞",5}},
        {"Moscow", {"–ú–∞—Å–∫–≤–∞",3}},
        {"St_Petersburg", {"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",3}},
        {"Novosibirsk", {"–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",7}}
    };

    if (timeZoneInfo.find(timeZone) != timeZoneInfo.end()) {
        std::string city = timeZoneInfo[timeZone].first;
        int offset = timeZoneInfo[timeZone].second;
        db.updateUserTimeZone(query->message->chat->id,offset);
        std::string response = "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + city + " (–¢–∞–π–º–∑–æ–Ω–∞ : " + std::to_string(offset) + ").";
        bot.getApi().sendMessage(query->message->chat->id, response);
    } else {
        bot.getApi().sendMessage(query->message->chat->id, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞");
    }
}

void onCallbackQuery(TgBot::CallbackQuery::Ptr query, TgBot::Bot& bot, NeverForgetBot::Database& db) {
   std::string callbackData = query->data;

    if (callbackData.find("user_timez-") == 0) {
        std::string timeZone = callbackData.substr(11);
        handleTimeZoneSelection(timeZone, query, bot, db);
    } else {
        bot.getApi().sendMessage(query->message->chat->id, "Unknown selection.");
    }
}


} // namespace NeverForgetBot::Commands

