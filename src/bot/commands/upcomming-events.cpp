#include "commands.hpp"
#include <unordered_map>

namespace NeverForgetBot::Commands {
    void onUpcommingEventsCommand(TgBot::Message::Ptr message, TgBot::Bot& bot, Database& db) {
        long telegram_id = message->from->id;

        auto upcomingEvents = db.getEventsOrderedByTimeDesc(telegram_id);

        if (upcomingEvents.empty()) {
            bot.getApi().sendMessage(telegram_id, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. –°–∞–º–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ üôÇ.");
            return;
        }

        static const std::unordered_map<EventStatus, std::string> statusMap = {
            {EventStatus::PENDING, "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"},
            {EventStatus::COMPLETED, "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"},
            {EventStatus::NOT_COMPLETED, "–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"},
            {EventStatus::DELETED, "—É–¥–∞–ª–µ–Ω–Ω–æ"}
        };

        for (const auto& event : upcomingEvents) {
            std::string status_str = statusMap.at(event.status);

            std::string eventMessage = 
                "**" + event.name + "**\n" +
                "–í—Ä–µ–º—è: " + event.time + "\n" +
                "–°—Ç–∞—Ç—É—Å: " + status_str + "\n\n";

            auto keyboard = std::make_shared<TgBot::InlineKeyboardMarkup>();
            keyboard->inlineKeyboard.push_back({
                TgBot::InlineKeyboardButton::Ptr(new TgBot::InlineKeyboardButton{"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "","upcomming-event-done-" + event.id}),
                TgBot::InlineKeyboardButton::Ptr(new TgBot::InlineKeyboardButton{"‚ùå –£–¥–∞–ª–∏—Ç—å", "","upcomming-event-delete-" + event.id})
            });

            bot.getApi().sendMessage(
                telegram_id,
                eventMessage,
                nullptr,  // Disable web page preview
                0,      // Reply to message ID
                keyboard,
                "Markdown"
            );
        }
    }
}
